version: '3.5'

services:
  postgres:
    image: "postgres:11-alpine"
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    volumes:
      # for the production database, no demo data should be inserted
      - ./user-manager-database/sql/ddl.sql:/docker-entrypoint-initdb.d/ddl.sql
      - pg_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_PASSWORD: "butterfly_user"
      POSTGRES_USER: "butterfly_user"
      POSTGRES_DB: "butterfly"
    networks:
      - user-manager-network

  user-manager:
    build:
      context: ./user-manager-rest-api
    container_name: user-manager
    restart: always
    ports:
      - "5000:5000"
    volumes:
      - /usr/app/node_modules
    links:
      - postgres
    depends_on:
      - postgres
    env_file: ./user-manager-rest-api/.user-manager-rest-api.env
    environment:
      NODE_ENV: "production"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://user-manager:5000/health"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - user-manager-network
      - middleware-dispatcher-network
      - telegram-consumer-network

  slack-account-configurator:
    build:
      context: ./slack-account-configurator
    container_name: slack-account-configurator
    restart: always
    ports:
      - "5200:5200"
    volumes:
      - /usr/app/node_modules
    links:
      - user-manager
    depends_on:
      - user-manager
    env_file: ./slack-account-configurator/.slack-account-configurator.env
    environment:
      NODE_ENV: "production"
    networks:
      - user-manager-network
      - slack-consumer-network

volumes:
  pg_data:

networks:
  user-manager-network:
    name: user-manager-network
  middleware-dispatcher-network:
    external:
      name: middleware-dispatcher-network
  telegram-consumer-network:
    external:
      name: telegram-consumer-network
  slack-consumer-network:
    external:
      name: slack-consumer-network